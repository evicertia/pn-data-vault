AWSTemplateFormatVersion: 2010-09-09
Description: 'Template containing all the once-in-an-account configurations for dev accounts'

Parameters:
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  SlackInfo:
    Type: String
    Description: <slack workspace id>:<slack channel id>. 'team_notifiche_dev_alarm' by default
    Default: TQSBH3ZS4:C02V0SRC4TV
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  PnCoreAwsAccountId:
    Type: String
    Description: Core AWS Account Id
    
Resources:

  ###                          DEFINE ALARM TOPIC                          ###
  ############################################################################
  # - Everything written to this topic is an alarm
  AlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'dev account alarms topic: send to SQS and slack'
  
  # - Alarm message queue
  AlarmHistoryBufferQueue:
    Type: AWS::SQS::Queue  

  # - Alarm message queue subscription
  AlarmSNSTopicToSqsHistoryBuffer:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt AlarmHistoryBufferQueue.Arn
      Region: !Ref AWS::Region
      TopicArn: !Ref AlarmSNSTopic
  
  # - Alarm message queue policy that grant write right to SNS
  AlarmSNSTopicToSqsHistoryPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref AlarmHistoryBufferQueue
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "sns.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource: !Sub ${AlarmHistoryBufferQueue.Arn}
            Condition: 
              ArnEquals: 
                aws:SourceArn: !Ref AlarmSNSTopic   

  # - Alarm message lambda subscription
  AlarmSNSTopicToLambda:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt LambdaFunction.Arn
      Region: !Ref AWS::Region
      TopicArn: !Ref AlarmSNSTopic

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com

  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: PublisherPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${PnCoreAwsAccountId}:pn-AllAlarmSnsTopic

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: pn-LambdaAlarmSnsPublisher
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')

          // Set region
          AWS.config.update({region: process.env.Region});

          exports.handler = async(event) => {
            console.log(JSON.stringify(event))

            for(let i=0; i<event.Records.length; i++){
              const record = event.Records[i]
              
              // Create publish parameters
              const params = {
                Message: record.Sns.Message,
                TopicArn: process.env.AlarmArn,
                Subject: record.Sns.Subject
              };
            
              // Create promise and SNS service object
              var publishTextPromise = new AWS.SNS({apiVersion: '2010-03-31'}).publish(params).promise();
            
              // Handle promise's fulfilled/rejected states
              await publishTextPromise
            }

            const response = {
                statusCode: 200,
                body: JSON.stringify('OK'),
            };
            return response;
          };

      Handler: index.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          AlarmArn: !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${PnCoreAwsAccountId}:pn-AllAlarmSnsTopic
          Region: !Sub ${AWS::Region}
      Role: !GetAtt LambdaFunctionExecutionRole.Arn

  # - Deploy Eventbridge rules for CodePipeline/CodeBuild
  # EventBridgeNotifications:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       AlarmSNSTopicName: !GetAtt  AlarmSNSTopic.TopicName
  #     TemplateURL: !Sub "${TemplateBucketBaseUrl}/once4account/dev-slack/no-codestar-deploy-notifications.yaml"
  #     TimeoutInMinutes: 15

  # - Deploy Lambda to enrich messages
  # EnrichNotificationsForSlack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     Parameters: 
  #       AlarmSNSTopicName: !GetAtt  AlarmSNSTopic.TopicName
  #       SlackInfo: !Ref SlackInfo
  #       TemplateBucketBaseUrl: !Ref TemplateBucketBaseUrl
  #     TemplateURL: !Sub "${TemplateBucketBaseUrl}/once4account/dev-slack/slack-message-enrichment.yaml"
  #     TimeoutInMinutes: 15
  
Outputs:

  AlarmSNSTopicArn:
    Value: !Ref AlarmSNSTopic
    Description: ARN of the Alarm SNS Topic
  
  AlarmSNSTopicName:
    Value: !GetAtt  AlarmSNSTopic.TopicName
    Description: Name of the Alarm SNS Topic
